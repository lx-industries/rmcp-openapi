---
source: tests/test_with_js.rs
expression: responses
---
[
  {
    "data": {
      "tools": [
        {
          "annotations": {
            "title": "Add a new pet to the store"
          },
          "description": "Add a new pet to the store\n\nAdd a new pet to the store\n\nEndpoint: POST /pet",
          "inputSchema": {
            "additionalProperties": false,
            "properties": {
              "request_body": {
                "additionalProperties": true,
                "description": "Pet object that needs to be added to the store",
                "properties": {
                  "id": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "name": {
                    "example": "doggie",
                    "type": "string"
                  },
                  "photoUrls": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "status": {
                    "enum": [
                      "available",
                      "pending",
                      "sold"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "photoUrls"
                ],
                "type": "object",
                "x-content-type": "application/json",
                "x-location": "body"
              }
            },
            "required": [
              "request_body"
            ],
            "type": "object"
          },
          "name": "addPet",
          "outputSchema": {
            "additionalProperties": false,
            "properties": {
              "body": {
                "additionalProperties": true,
                "properties": {
                  "id": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "name": {
                    "example": "doggie",
                    "type": "string"
                  },
                  "photoUrls": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "status": {
                    "enum": [
                      "available",
                      "pending",
                      "sold"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "photoUrls"
                ],
                "type": "object"
              },
              "status": {
                "description": "HTTP status code",
                "type": "integer"
              }
            },
            "required": [
              "status",
              "body"
            ],
            "type": "object"
          }
        },
        {
          "annotations": {
            "title": "Finds Pets by status"
          },
          "description": "Finds Pets by status\n\nMultiple status values can be provided with comma separated strings\n\nEndpoint: GET /pet/findByStatus",
          "inputSchema": {
            "additionalProperties": false,
            "properties": {
              "status": {
                "description": "Status values that need to be considered for filter",
                "items": {
                  "enum": [
                    "available",
                    "pending",
                    "sold"
                  ],
                  "type": "string"
                },
                "type": "array",
                "x-parameter-location": "query",
                "x-parameter-required": true
              },
              "timeout_seconds": {
                "default": 30,
                "description": "Request timeout in seconds",
                "maximum": 300,
                "minimum": 1,
                "type": "integer"
              }
            },
            "required": [
              "status"
            ],
            "type": "object"
          },
          "name": "findPetsByStatus",
          "outputSchema": {
            "additionalProperties": false,
            "properties": {
              "body": {
                "items": {
                  "additionalProperties": true,
                  "properties": {
                    "id": {
                      "format": "int64",
                      "type": "integer"
                    },
                    "name": {
                      "example": "doggie",
                      "type": "string"
                    },
                    "photoUrls": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "status": {
                      "enum": [
                        "available",
                        "pending",
                        "sold"
                      ],
                      "type": "string"
                    }
                  },
                  "required": [
                    "name",
                    "photoUrls"
                  ],
                  "type": "object"
                },
                "type": "array"
              },
              "status": {
                "description": "HTTP status code",
                "type": "integer"
              }
            },
            "required": [
              "status",
              "body"
            ],
            "type": "object"
          }
        },
        {
          "annotations": {
            "title": "Find pet by ID"
          },
          "description": "Find pet by ID\n\nReturns a single pet\n\nEndpoint: GET /pet/{petId}",
          "inputSchema": {
            "additionalProperties": false,
            "properties": {
              "petId": {
                "description": "ID of pet to return",
                "format": "int64",
                "minimum": 1,
                "type": "integer",
                "x-parameter-location": "path",
                "x-parameter-required": true
              }
            },
            "required": [
              "petId"
            ],
            "type": "object"
          },
          "name": "getPetById",
          "outputSchema": {
            "additionalProperties": false,
            "properties": {
              "body": {
                "additionalProperties": true,
                "properties": {
                  "id": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "name": {
                    "example": "doggie",
                    "type": "string"
                  },
                  "photoUrls": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "status": {
                    "enum": [
                      "available",
                      "pending",
                      "sold"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "photoUrls"
                ],
                "type": "object"
              },
              "status": {
                "description": "HTTP status code",
                "type": "integer"
              }
            },
            "required": [
              "status",
              "body"
            ],
            "type": "object"
          }
        }
      ]
    },
    "type": "tools_list"
  },
  {
    "data": {
      "resources": []
    },
    "type": "resources_list"
  },
  {
    "data": {
      "resourceTemplates": []
    },
    "type": "resource_templates_list"
  },
  {
    "data": {
      "prompts": []
    },
    "type": "prompts_list"
  },
  {
    "arguments": {
      "petId": 123
    },
    "data": {
      "content": [
        {
          "text": "HTTP ✅ Success\n\nStatus: 200 OK\n\nRequest: GET http://127.0.0.1:8084/pet/123\n\nResponse Body:\n{\n  \"category\": {\n    \"id\": 1,\n    \"name\": \"Dogs\"\n  },\n  \"id\": 123,\n  \"name\": \"doggie\",\n  \"photoUrls\": [\n    \"https://example.com/photo1.jpg\"\n  ],\n  \"status\": \"available\",\n  \"tags\": [\n    {\n      \"id\": 1,\n      \"name\": \"tag1\"\n    }\n  ]\n}",
          "type": "text"
        }
      ],
      "isError": false,
      "structuredContent": {
        "body": {
          "category": {
            "id": 1,
            "name": "Dogs"
          },
          "id": 123,
          "name": "doggie",
          "photoUrls": [
            "https://example.com/photo1.jpg"
          ],
          "status": "available",
          "tags": [
            {
              "id": 1,
              "name": "tag1"
            }
          ]
        },
        "status": 200
      }
    },
    "success": true,
    "tool": "getPetById",
    "type": "tool_call_result"
  },
  {
    "arguments": {
      "status": [
        "available",
        "pending"
      ]
    },
    "data": {
      "content": [
        {
          "text": "HTTP ✅ Success\n\nStatus: 200 OK\n\nRequest: GET http://127.0.0.1:8084/pet/findByStatus?status=available&status=pending\n\nResponse Body:\n[\n  {\n    \"category\": {\n      \"id\": 1,\n      \"name\": \"Dogs\"\n    },\n    \"id\": 1,\n    \"name\": \"doggie\",\n    \"photoUrls\": [\n      \"https://example.com/photo1.jpg\"\n    ],\n    \"status\": \"available\",\n    \"tags\": [\n      {\n        \"id\": 1,\n        \"name\": \"tag1\"\n      }\n    ]\n  },\n  {\n    \"category\": {\n      \"id\": 2,\n      \"name\": \"Cats\"\n    },\n    \"id\": 2,\n    \"name\": \"kitty\",\n    \"photoUrls\": [\n      \"https://example.com/photo2.jpg\"\n    ],\n    \"status\": \"pending\",\n    \"tags\": [\n      {\n        \"id\": 2,\n        \"name\": \"tag2\"\n      }\n    ]\n  }\n]",
          "type": "text"
        }
      ],
      "isError": false,
      "structuredContent": {
        "body": [
          {
            "category": {
              "id": 1,
              "name": "Dogs"
            },
            "id": 1,
            "name": "doggie",
            "photoUrls": [
              "https://example.com/photo1.jpg"
            ],
            "status": "available",
            "tags": [
              {
                "id": 1,
                "name": "tag1"
              }
            ]
          },
          {
            "category": {
              "id": 2,
              "name": "Cats"
            },
            "id": 2,
            "name": "kitty",
            "photoUrls": [
              "https://example.com/photo2.jpg"
            ],
            "status": "pending",
            "tags": [
              {
                "id": 2,
                "name": "tag2"
              }
            ]
          }
        ],
        "status": 200
      }
    },
    "success": true,
    "tool": "findPetsByStatus",
    "type": "tool_call_result"
  },
  {
    "arguments": {
      "request_body": {
        "name": "MCP Test Dog",
        "status": "available"
      }
    },
    "data": {
      "content": [
        {
          "text": "HTTP ✅ Success\n\nStatus: 201 Created\n\nRequest: POST http://127.0.0.1:8084/pet\n\nRequest Body:\n{\n  \"category\": {\n    \"id\": 1,\n    \"name\": \"Dogs\"\n  },\n  \"name\": \"MCP Test Dog\",\n  \"photoUrls\": [\n    \"https://example.com/mcp-test-dog.jpg\"\n  ],\n  \"status\": \"available\",\n  \"tags\": [\n    {\n      \"id\": 1,\n      \"name\": \"mcp-test\"\n    }\n  ]\n}\n\nResponse Body:\n{\n  \"category\": {\n    \"id\": 1,\n    \"name\": \"Dogs\"\n  },\n  \"id\": 123,\n  \"name\": \"new doggie\",\n  \"photoUrls\": [\n    \"https://example.com/photo1.jpg\"\n  ],\n  \"status\": \"available\",\n  \"tags\": [\n    {\n      \"id\": 1,\n      \"name\": \"tag1\"\n    }\n  ]\n}",
          "type": "text"
        }
      ],
      "isError": false,
      "structuredContent": {
        "body": {
          "category": {
            "id": 1,
            "name": "Dogs"
          },
          "id": 123,
          "name": "new doggie",
          "photoUrls": [
            "https://example.com/photo1.jpg"
          ],
          "status": "available",
          "tags": [
            {
              "id": 1,
              "name": "tag1"
            }
          ]
        },
        "status": 201
      }
    },
    "success": true,
    "tool": "addPet",
    "type": "tool_call_result"
  },
  {
    "arguments": {
      "petId": 999999
    },
    "data": {
      "content": [
        {
          "text": "HTTP ❌ Error\n\nStatus: 404 Not Found - Not Found: Endpoint or resource does not exist\n\nRequest: GET http://127.0.0.1:8084/pet/999999\n\nResponse Body:\n{\n  \"message\": \"Pet not found\"\n}",
          "type": "text"
        }
      ],
      "isError": true,
      "structuredContent": {
        "body": {
          "message": "Pet not found"
        },
        "status": 404
      }
    },
    "success": true,
    "tool": "getPetById",
    "type": "tool_call_result"
  },
  {
    "arguments": {
      "request_body": {
        "status": "invalid_status_value"
      }
    },
    "data": {
      "content": [
        {
          "text": "HTTP ❌ Error\n\nStatus: 400 Bad Request - Bad Request: Check request parameters\n\nRequest: POST http://127.0.0.1:8084/pet\n\nRequest Body:\n{\n  \"status\": \"invalid_status_value\"\n}\n\nResponse Body:\n{\n  \"details\": \"Name is required\",\n  \"message\": \"Invalid input\"\n}",
          "type": "text"
        }
      ],
      "isError": true,
      "structuredContent": {
        "body": {
          "details": "Name is required",
          "message": "Invalid input"
        },
        "status": 400
      }
    },
    "success": true,
    "tool": "addPet",
    "type": "tool_call_result"
  },
  {
    "arguments": {
      "pet_id": 123
    },
    "data": {
      "content": [
        {
          "text": "❌ Error executing tool 'getPetById'\n\nError: Invalid parameter: pet_id - Unknown parameter. Did you mean 'petId'?\n\nTool details:\n- Method: GET\n- Path: /pet/{petId}\n- Arguments: {\n  \"pet_id\": 123\n}",
          "type": "text"
        }
      ],
      "isError": true
    },
    "success": true,
    "tool": "getPetById",
    "type": "tool_call_result"
  },
  {
    "arguments": {
      "limit": 10,
      "statuses": [
        "available"
      ]
    },
    "data": {
      "content": [
        {
          "text": "❌ Error executing tool 'findPetsByStatus'\n\nError: Invalid parameter: limit - Unknown parameter. Valid parameters are: status, timeout_seconds\n\nTool details:\n- Method: GET\n- Path: /pet/findByStatus\n- Arguments: {\n  \"limit\": 10,\n  \"statuses\": [\n    \"available\"\n  ]\n}",
          "type": "text"
        }
      ],
      "isError": true
    },
    "success": true,
    "tool": "findPetsByStatus",
    "type": "tool_call_result"
  }
]
