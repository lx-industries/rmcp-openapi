---
source: tests/test_with_python.rs
expression: responses
---
[
  {
    "data": {
      "meta": null,
      "nextCursor": null,
      "tools": [
        {
          "annotations": {
            "destructiveHint": null,
            "idempotentHint": null,
            "openWorldHint": null,
            "readOnlyHint": null,
            "title": "Add a new pet to the store"
          },
          "description": "Add a new pet to the store\n\nAdd a new pet to the store\n\nEndpoint: POST /pet",
          "inputSchema": {
            "additionalProperties": false,
            "properties": {
              "request_body": {
                "additionalProperties": true,
                "description": "Pet object that needs to be added to the store",
                "properties": {
                  "id": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "name": {
                    "example": "doggie",
                    "type": "string"
                  },
                  "photoUrls": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "status": {
                    "enum": [
                      "available",
                      "pending",
                      "sold"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "photoUrls"
                ],
                "type": "object",
                "x-content-type": "application/json",
                "x-location": "body"
              }
            },
            "required": [
              "request_body"
            ],
            "type": "object"
          },
          "meta": null,
          "name": "addPet",
          "outputSchema": {
            "additionalProperties": false,
            "description": "Unified response structure with success and error variants",
            "properties": {
              "body": {
                "description": "Response body - either success data or error information",
                "oneOf": [
                  {
                    "additionalProperties": true,
                    "properties": {
                      "id": {
                        "format": "int64",
                        "type": "integer"
                      },
                      "name": {
                        "example": "doggie",
                        "type": "string"
                      },
                      "photoUrls": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "status": {
                        "enum": [
                          "available",
                          "pending",
                          "sold"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "photoUrls"
                    ],
                    "type": "object"
                  },
                  {
                    "description": "Error response structure for tool execution failures",
                    "properties": {
                      "error": {
                        "description": "Error that can occur during tool execution",
                        "oneOf": [
                          {
                            "description": "Invalid parameter error with suggestions",
                            "properties": {
                              "parameter": {
                                "description": "The parameter name that was invalid",
                                "type": "string"
                              },
                              "suggestions": {
                                "description": "Suggested correct parameter names",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "type": {
                                "const": "invalid-parameter",
                                "type": "string"
                              },
                              "valid_parameters": {
                                "description": "All valid parameter names for this tool",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              }
                            },
                            "required": [
                              "type",
                              "parameter",
                              "suggestions",
                              "valid_parameters"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "Tool not found error",
                            "properties": {
                              "tool_name": {
                                "description": "Name of the tool that was not found",
                                "type": "string"
                              },
                              "type": {
                                "const": "tool-not-found",
                                "type": "string"
                              }
                            },
                            "required": [
                              "type",
                              "tool_name"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "Validation error (e.g., type mismatches, constraint violations)",
                            "properties": {
                              "message": {
                                "description": "Description of what validation failed",
                                "type": "string"
                              },
                              "type": {
                                "const": "validation-error",
                                "type": "string"
                              }
                            },
                            "required": [
                              "type",
                              "message"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "Missing required parameter",
                            "properties": {
                              "description": {
                                "description": "Description of the parameter from OpenAPI",
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "expected_type": {
                                "description": "Expected type of the parameter",
                                "type": "string"
                              },
                              "parameter": {
                                "description": "Name of the missing parameter",
                                "type": "string"
                              },
                              "type": {
                                "const": "missing-required-parameter",
                                "type": "string"
                              }
                            },
                            "required": [
                              "type",
                              "parameter",
                              "expected_type"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "HTTP error response from the API",
                            "properties": {
                              "message": {
                                "description": "Error message or response body",
                                "type": "string"
                              },
                              "status": {
                                "description": "HTTP status code",
                                "format": "uint16",
                                "maximum": 65535,
                                "minimum": 0,
                                "type": "integer"
                              },
                              "type": {
                                "const": "http-error",
                                "type": "string"
                              }
                            },
                            "required": [
                              "type",
                              "status",
                              "message"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "HTTP request failed (network, connection, timeout)",
                            "properties": {
                              "message": {
                                "description": "Description of the request failure",
                                "type": "string"
                              },
                              "type": {
                                "const": "http-request-error",
                                "type": "string"
                              }
                            },
                            "required": [
                              "type",
                              "message"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "JSON parsing/serialization error",
                            "properties": {
                              "message": {
                                "description": "Description of the JSON error",
                                "type": "string"
                              },
                              "type": {
                                "const": "json-error",
                                "type": "string"
                              }
                            },
                            "required": [
                              "type",
                              "message"
                            ],
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "required": [
                      "error"
                    ],
                    "type": "object"
                  }
                ]
              },
              "status": {
                "description": "HTTP status code",
                "maximum": 599,
                "minimum": 100,
                "type": "integer"
              }
            },
            "required": [
              "status",
              "body"
            ],
            "type": "object"
          },
          "title": null
        },
        {
          "annotations": {
            "destructiveHint": null,
            "idempotentHint": null,
            "openWorldHint": null,
            "readOnlyHint": null,
            "title": "Finds Pets by status"
          },
          "description": "Finds Pets by status\n\nMultiple status values can be provided with comma separated strings\n\nEndpoint: GET /pet/findByStatus",
          "inputSchema": {
            "additionalProperties": false,
            "properties": {
              "status": {
                "description": "Status values that need to be considered for filter",
                "items": {
                  "enum": [
                    "available",
                    "pending",
                    "sold"
                  ],
                  "type": "string"
                },
                "type": "array",
                "x-parameter-location": "query",
                "x-parameter-required": true
              },
              "timeout_seconds": {
                "default": 30,
                "description": "Request timeout in seconds",
                "maximum": 300,
                "minimum": 1,
                "type": "integer"
              }
            },
            "required": [
              "status"
            ],
            "type": "object"
          },
          "meta": null,
          "name": "findPetsByStatus",
          "outputSchema": {
            "additionalProperties": false,
            "description": "Unified response structure with success and error variants",
            "properties": {
              "body": {
                "description": "Response body - either success data or error information",
                "oneOf": [
                  {
                    "items": {
                      "additionalProperties": true,
                      "properties": {
                        "id": {
                          "format": "int64",
                          "type": "integer"
                        },
                        "name": {
                          "example": "doggie",
                          "type": "string"
                        },
                        "photoUrls": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "status": {
                          "enum": [
                            "available",
                            "pending",
                            "sold"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "name",
                        "photoUrls"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  {
                    "description": "Error response structure for tool execution failures",
                    "properties": {
                      "error": {
                        "description": "Error that can occur during tool execution",
                        "oneOf": [
                          {
                            "description": "Invalid parameter error with suggestions",
                            "properties": {
                              "parameter": {
                                "description": "The parameter name that was invalid",
                                "type": "string"
                              },
                              "suggestions": {
                                "description": "Suggested correct parameter names",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "type": {
                                "const": "invalid-parameter",
                                "type": "string"
                              },
                              "valid_parameters": {
                                "description": "All valid parameter names for this tool",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              }
                            },
                            "required": [
                              "type",
                              "parameter",
                              "suggestions",
                              "valid_parameters"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "Tool not found error",
                            "properties": {
                              "tool_name": {
                                "description": "Name of the tool that was not found",
                                "type": "string"
                              },
                              "type": {
                                "const": "tool-not-found",
                                "type": "string"
                              }
                            },
                            "required": [
                              "type",
                              "tool_name"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "Validation error (e.g., type mismatches, constraint violations)",
                            "properties": {
                              "message": {
                                "description": "Description of what validation failed",
                                "type": "string"
                              },
                              "type": {
                                "const": "validation-error",
                                "type": "string"
                              }
                            },
                            "required": [
                              "type",
                              "message"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "Missing required parameter",
                            "properties": {
                              "description": {
                                "description": "Description of the parameter from OpenAPI",
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "expected_type": {
                                "description": "Expected type of the parameter",
                                "type": "string"
                              },
                              "parameter": {
                                "description": "Name of the missing parameter",
                                "type": "string"
                              },
                              "type": {
                                "const": "missing-required-parameter",
                                "type": "string"
                              }
                            },
                            "required": [
                              "type",
                              "parameter",
                              "expected_type"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "HTTP error response from the API",
                            "properties": {
                              "message": {
                                "description": "Error message or response body",
                                "type": "string"
                              },
                              "status": {
                                "description": "HTTP status code",
                                "format": "uint16",
                                "maximum": 65535,
                                "minimum": 0,
                                "type": "integer"
                              },
                              "type": {
                                "const": "http-error",
                                "type": "string"
                              }
                            },
                            "required": [
                              "type",
                              "status",
                              "message"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "HTTP request failed (network, connection, timeout)",
                            "properties": {
                              "message": {
                                "description": "Description of the request failure",
                                "type": "string"
                              },
                              "type": {
                                "const": "http-request-error",
                                "type": "string"
                              }
                            },
                            "required": [
                              "type",
                              "message"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "JSON parsing/serialization error",
                            "properties": {
                              "message": {
                                "description": "Description of the JSON error",
                                "type": "string"
                              },
                              "type": {
                                "const": "json-error",
                                "type": "string"
                              }
                            },
                            "required": [
                              "type",
                              "message"
                            ],
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "required": [
                      "error"
                    ],
                    "type": "object"
                  }
                ]
              },
              "status": {
                "description": "HTTP status code",
                "maximum": 599,
                "minimum": 100,
                "type": "integer"
              }
            },
            "required": [
              "status",
              "body"
            ],
            "type": "object"
          },
          "title": null
        },
        {
          "annotations": {
            "destructiveHint": null,
            "idempotentHint": null,
            "openWorldHint": null,
            "readOnlyHint": null,
            "title": "Find pet by ID"
          },
          "description": "Find pet by ID\n\nReturns a single pet\n\nEndpoint: GET /pet/{petId}",
          "inputSchema": {
            "additionalProperties": false,
            "properties": {
              "petId": {
                "description": "ID of pet to return",
                "format": "int64",
                "minimum": 1,
                "type": "integer",
                "x-parameter-location": "path",
                "x-parameter-required": true
              }
            },
            "required": [
              "petId"
            ],
            "type": "object"
          },
          "meta": null,
          "name": "getPetById",
          "outputSchema": {
            "additionalProperties": false,
            "description": "Unified response structure with success and error variants",
            "properties": {
              "body": {
                "description": "Response body - either success data or error information",
                "oneOf": [
                  {
                    "additionalProperties": true,
                    "properties": {
                      "id": {
                        "format": "int64",
                        "type": "integer"
                      },
                      "name": {
                        "example": "doggie",
                        "type": "string"
                      },
                      "photoUrls": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "status": {
                        "enum": [
                          "available",
                          "pending",
                          "sold"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "photoUrls"
                    ],
                    "type": "object"
                  },
                  {
                    "description": "Error response structure for tool execution failures",
                    "properties": {
                      "error": {
                        "description": "Error that can occur during tool execution",
                        "oneOf": [
                          {
                            "description": "Invalid parameter error with suggestions",
                            "properties": {
                              "parameter": {
                                "description": "The parameter name that was invalid",
                                "type": "string"
                              },
                              "suggestions": {
                                "description": "Suggested correct parameter names",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "type": {
                                "const": "invalid-parameter",
                                "type": "string"
                              },
                              "valid_parameters": {
                                "description": "All valid parameter names for this tool",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              }
                            },
                            "required": [
                              "type",
                              "parameter",
                              "suggestions",
                              "valid_parameters"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "Tool not found error",
                            "properties": {
                              "tool_name": {
                                "description": "Name of the tool that was not found",
                                "type": "string"
                              },
                              "type": {
                                "const": "tool-not-found",
                                "type": "string"
                              }
                            },
                            "required": [
                              "type",
                              "tool_name"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "Validation error (e.g., type mismatches, constraint violations)",
                            "properties": {
                              "message": {
                                "description": "Description of what validation failed",
                                "type": "string"
                              },
                              "type": {
                                "const": "validation-error",
                                "type": "string"
                              }
                            },
                            "required": [
                              "type",
                              "message"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "Missing required parameter",
                            "properties": {
                              "description": {
                                "description": "Description of the parameter from OpenAPI",
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "expected_type": {
                                "description": "Expected type of the parameter",
                                "type": "string"
                              },
                              "parameter": {
                                "description": "Name of the missing parameter",
                                "type": "string"
                              },
                              "type": {
                                "const": "missing-required-parameter",
                                "type": "string"
                              }
                            },
                            "required": [
                              "type",
                              "parameter",
                              "expected_type"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "HTTP error response from the API",
                            "properties": {
                              "message": {
                                "description": "Error message or response body",
                                "type": "string"
                              },
                              "status": {
                                "description": "HTTP status code",
                                "format": "uint16",
                                "maximum": 65535,
                                "minimum": 0,
                                "type": "integer"
                              },
                              "type": {
                                "const": "http-error",
                                "type": "string"
                              }
                            },
                            "required": [
                              "type",
                              "status",
                              "message"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "HTTP request failed (network, connection, timeout)",
                            "properties": {
                              "message": {
                                "description": "Description of the request failure",
                                "type": "string"
                              },
                              "type": {
                                "const": "http-request-error",
                                "type": "string"
                              }
                            },
                            "required": [
                              "type",
                              "message"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "JSON parsing/serialization error",
                            "properties": {
                              "message": {
                                "description": "Description of the JSON error",
                                "type": "string"
                              },
                              "type": {
                                "const": "json-error",
                                "type": "string"
                              }
                            },
                            "required": [
                              "type",
                              "message"
                            ],
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "required": [
                      "error"
                    ],
                    "type": "object"
                  }
                ]
              },
              "status": {
                "description": "HTTP status code",
                "maximum": 599,
                "minimum": 100,
                "type": "integer"
              }
            },
            "required": [
              "status",
              "body"
            ],
            "type": "object"
          },
          "title": null
        }
      ]
    },
    "type": "tools_list"
  },
  {
    "data": {
      "meta": null,
      "nextCursor": null,
      "resources": []
    },
    "type": "resources_list"
  },
  {
    "data": {
      "meta": null,
      "nextCursor": null,
      "prompts": []
    },
    "type": "prompts_list"
  },
  {
    "arguments": {
      "petId": 123
    },
    "data": {
      "content": [],
      "isError": false,
      "meta": null,
      "structuredContent": {
        "body": {
          "category": {
            "id": 1,
            "name": "Dogs"
          },
          "id": 123,
          "name": "doggie",
          "photoUrls": [
            "https://example.com/photo1.jpg"
          ],
          "status": "available",
          "tags": [
            {
              "id": 1,
              "name": "tag1"
            }
          ]
        },
        "status": 200
      }
    },
    "success": true,
    "tool": "getPetById",
    "type": "tool_call_result"
  },
  {
    "arguments": {
      "status": [
        "available",
        "pending"
      ]
    },
    "data": {
      "content": [],
      "isError": false,
      "meta": null,
      "structuredContent": {
        "body": [
          {
            "category": {
              "id": 1,
              "name": "Dogs"
            },
            "id": 1,
            "name": "doggie",
            "photoUrls": [
              "https://example.com/photo1.jpg"
            ],
            "status": "available",
            "tags": [
              {
                "id": 1,
                "name": "tag1"
              }
            ]
          },
          {
            "category": {
              "id": 2,
              "name": "Cats"
            },
            "id": 2,
            "name": "kitty",
            "photoUrls": [
              "https://example.com/photo2.jpg"
            ],
            "status": "pending",
            "tags": [
              {
                "id": 2,
                "name": "tag2"
              }
            ]
          }
        ],
        "status": 200
      }
    },
    "success": true,
    "tool": "findPetsByStatus",
    "type": "tool_call_result"
  },
  {
    "arguments": {
      "request_body": {
        "name": "MCP Test Dog",
        "status": "available"
      }
    },
    "data": {
      "content": [],
      "isError": false,
      "meta": null,
      "structuredContent": {
        "body": {
          "category": {
            "id": 1,
            "name": "Dogs"
          },
          "id": 123,
          "name": "new doggie",
          "photoUrls": [
            "https://example.com/photo1.jpg"
          ],
          "status": "available",
          "tags": [
            {
              "id": 1,
              "name": "tag1"
            }
          ]
        },
        "status": 201
      }
    },
    "success": true,
    "tool": "addPet",
    "type": "tool_call_result"
  },
  {
    "arguments": {
      "petId": 999999
    },
    "data": {
      "content": [],
      "isError": true,
      "meta": null,
      "structuredContent": {
        "body": {
          "message": "Pet not found"
        },
        "status": 404
      }
    },
    "success": true,
    "tool": "getPetById",
    "type": "tool_call_result"
  },
  {
    "arguments": {
      "request_body": {
        "status": "invalid_status_value"
      }
    },
    "data": {
      "content": [],
      "isError": true,
      "meta": null,
      "structuredContent": {
        "body": {
          "details": "Name is required",
          "message": "Invalid input"
        },
        "status": 400
      }
    },
    "success": true,
    "tool": "addPet",
    "type": "tool_call_result"
  },
  {
    "arguments": {
      "pet_id": 123
    },
    "data": {
      "content": [],
      "isError": true,
      "meta": null,
      "structuredContent": {
        "body": {
          "error": {
            "parameter": "pet_id",
            "suggestions": [
              "petId"
            ],
            "type": "invalid-parameter",
            "valid_parameters": [
              "petId"
            ]
          }
        },
        "status": 400
      }
    },
    "success": true,
    "tool": "getPetById",
    "type": "tool_call_result"
  },
  {
    "arguments": {
      "limit": 10,
      "statuses": [
        "available"
      ]
    },
    "data": {
      "content": [],
      "isError": true,
      "meta": null,
      "structuredContent": {
        "body": {
          "error": {
            "parameter": "limit",
            "suggestions": [],
            "type": "invalid-parameter",
            "valid_parameters": [
              "status",
              "timeout_seconds"
            ]
          }
        },
        "status": 400
      }
    },
    "success": true,
    "tool": "findPetsByStatus",
    "type": "tool_call_result"
  }
]
