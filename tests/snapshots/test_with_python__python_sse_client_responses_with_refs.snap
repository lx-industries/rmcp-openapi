---
source: tests/test_with_python.rs
expression: responses
---
[
  {
    "data": {
      "meta": null,
      "nextCursor": null,
      "tools": [
        {
          "annotations": {
            "destructiveHint": null,
            "idempotentHint": null,
            "openWorldHint": null,
            "readOnlyHint": null,
            "title": "Add a new pet to the store"
          },
          "description": "Add a new pet to the store\n\nAdd a new pet to the store\n\nEndpoint: POST /pet",
          "inputSchema": {
            "additionalProperties": false,
            "properties": {
              "request_body": {
                "additionalProperties": true,
                "description": "Pet object that needs to be added to the store",
                "properties": {
                  "id": {
                    "format": "int64",
                    "type": "integer"
                  },
                  "name": {
                    "example": "doggie",
                    "type": "string"
                  },
                  "photoUrls": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "status": {
                    "enum": [
                      "available",
                      "pending",
                      "sold"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "photoUrls"
                ],
                "type": "object",
                "x-content-type": "application/json",
                "x-location": "body"
              }
            },
            "required": [
              "request_body"
            ],
            "type": "object"
          },
          "meta": null,
          "name": "addPet",
          "outputSchema": {
            "additionalProperties": false,
            "description": "Unified response structure with success and error variants",
            "properties": {
              "body": {
                "description": "Response body - either success data or error information",
                "oneOf": [
                  {
                    "additionalProperties": true,
                    "properties": {
                      "id": {
                        "format": "int64",
                        "type": "integer"
                      },
                      "name": {
                        "example": "doggie",
                        "type": "string"
                      },
                      "photoUrls": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "status": {
                        "enum": [
                          "available",
                          "pending",
                          "sold"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "photoUrls"
                    ],
                    "type": "object"
                  },
                  {
                    "description": "Error response structure for tool execution failures",
                    "properties": {
                      "error": {
                        "description": "Execution errors that occur during tool execution\nThese return as Ok(CallToolResult { is_error: true })",
                        "oneOf": [
                          {
                            "description": "HTTP error response from the API",
                            "properties": {
                              "details": {
                                "description": "Optional structured error details from API"
                              },
                              "message": {
                                "description": "Error message or response body",
                                "type": "string"
                              },
                              "status": {
                                "description": "HTTP status code",
                                "format": "uint16",
                                "maximum": 65535,
                                "minimum": 0,
                                "type": "integer"
                              },
                              "type": {
                                "const": "http-error",
                                "type": "string"
                              }
                            },
                            "required": [
                              "type",
                              "status",
                              "message"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "Network/connection failures",
                            "properties": {
                              "category": {
                                "description": "Network error categories for better error handling",
                                "oneOf": [
                                  {
                                    "const": "timeout",
                                    "description": "Request timeout",
                                    "type": "string"
                                  },
                                  {
                                    "const": "connect",
                                    "description": "Connection error (DNS, refused, unreachable)",
                                    "type": "string"
                                  },
                                  {
                                    "const": "request",
                                    "description": "Request construction/sending error",
                                    "type": "string"
                                  },
                                  {
                                    "const": "body",
                                    "description": "Response body error",
                                    "type": "string"
                                  },
                                  {
                                    "const": "decode",
                                    "description": "Response decoding error",
                                    "type": "string"
                                  },
                                  {
                                    "const": "other",
                                    "description": "Other network errors",
                                    "type": "string"
                                  }
                                ]
                              },
                              "message": {
                                "description": "Description of the network failure",
                                "type": "string"
                              },
                              "type": {
                                "const": "network-error",
                                "type": "string"
                              }
                            },
                            "required": [
                              "type",
                              "message",
                              "category"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "Response parsing failed",
                            "properties": {
                              "raw_response": {
                                "description": "Raw response body for debugging",
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "reason": {
                                "description": "Description of the parsing failure",
                                "type": "string"
                              },
                              "type": {
                                "const": "response-parsing-error",
                                "type": "string"
                              }
                            },
                            "required": [
                              "type",
                              "reason"
                            ],
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "required": [
                      "error"
                    ],
                    "type": "object"
                  }
                ]
              },
              "status": {
                "description": "HTTP status code",
                "maximum": 599,
                "minimum": 100,
                "type": "integer"
              }
            },
            "required": [
              "status",
              "body"
            ],
            "type": "object"
          },
          "title": null
        },
        {
          "annotations": {
            "destructiveHint": null,
            "idempotentHint": null,
            "openWorldHint": null,
            "readOnlyHint": null,
            "title": "Finds Pets by status"
          },
          "description": "Finds Pets by status\n\nMultiple status values can be provided with comma separated strings\n\nEndpoint: GET /pet/findByStatus",
          "inputSchema": {
            "additionalProperties": false,
            "properties": {
              "status": {
                "description": "Status values that need to be considered for filter",
                "items": {
                  "enum": [
                    "available",
                    "pending",
                    "sold"
                  ],
                  "type": "string"
                },
                "type": "array",
                "x-parameter-location": "query",
                "x-parameter-required": true
              },
              "timeout_seconds": {
                "default": 30,
                "description": "Request timeout in seconds",
                "maximum": 300,
                "minimum": 1,
                "type": "integer"
              }
            },
            "required": [
              "status"
            ],
            "type": "object"
          },
          "meta": null,
          "name": "findPetsByStatus",
          "outputSchema": {
            "additionalProperties": false,
            "description": "Unified response structure with success and error variants",
            "properties": {
              "body": {
                "description": "Response body - either success data or error information",
                "oneOf": [
                  {
                    "items": {
                      "additionalProperties": true,
                      "properties": {
                        "id": {
                          "format": "int64",
                          "type": "integer"
                        },
                        "name": {
                          "example": "doggie",
                          "type": "string"
                        },
                        "photoUrls": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "status": {
                          "enum": [
                            "available",
                            "pending",
                            "sold"
                          ],
                          "type": "string"
                        }
                      },
                      "required": [
                        "name",
                        "photoUrls"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  {
                    "description": "Error response structure for tool execution failures",
                    "properties": {
                      "error": {
                        "description": "Execution errors that occur during tool execution\nThese return as Ok(CallToolResult { is_error: true })",
                        "oneOf": [
                          {
                            "description": "HTTP error response from the API",
                            "properties": {
                              "details": {
                                "description": "Optional structured error details from API"
                              },
                              "message": {
                                "description": "Error message or response body",
                                "type": "string"
                              },
                              "status": {
                                "description": "HTTP status code",
                                "format": "uint16",
                                "maximum": 65535,
                                "minimum": 0,
                                "type": "integer"
                              },
                              "type": {
                                "const": "http-error",
                                "type": "string"
                              }
                            },
                            "required": [
                              "type",
                              "status",
                              "message"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "Network/connection failures",
                            "properties": {
                              "category": {
                                "description": "Network error categories for better error handling",
                                "oneOf": [
                                  {
                                    "const": "timeout",
                                    "description": "Request timeout",
                                    "type": "string"
                                  },
                                  {
                                    "const": "connect",
                                    "description": "Connection error (DNS, refused, unreachable)",
                                    "type": "string"
                                  },
                                  {
                                    "const": "request",
                                    "description": "Request construction/sending error",
                                    "type": "string"
                                  },
                                  {
                                    "const": "body",
                                    "description": "Response body error",
                                    "type": "string"
                                  },
                                  {
                                    "const": "decode",
                                    "description": "Response decoding error",
                                    "type": "string"
                                  },
                                  {
                                    "const": "other",
                                    "description": "Other network errors",
                                    "type": "string"
                                  }
                                ]
                              },
                              "message": {
                                "description": "Description of the network failure",
                                "type": "string"
                              },
                              "type": {
                                "const": "network-error",
                                "type": "string"
                              }
                            },
                            "required": [
                              "type",
                              "message",
                              "category"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "Response parsing failed",
                            "properties": {
                              "raw_response": {
                                "description": "Raw response body for debugging",
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "reason": {
                                "description": "Description of the parsing failure",
                                "type": "string"
                              },
                              "type": {
                                "const": "response-parsing-error",
                                "type": "string"
                              }
                            },
                            "required": [
                              "type",
                              "reason"
                            ],
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "required": [
                      "error"
                    ],
                    "type": "object"
                  }
                ]
              },
              "status": {
                "description": "HTTP status code",
                "maximum": 599,
                "minimum": 100,
                "type": "integer"
              }
            },
            "required": [
              "status",
              "body"
            ],
            "type": "object"
          },
          "title": null
        },
        {
          "annotations": {
            "destructiveHint": null,
            "idempotentHint": null,
            "openWorldHint": null,
            "readOnlyHint": null,
            "title": "Find pet by ID"
          },
          "description": "Find pet by ID\n\nReturns a single pet\n\nEndpoint: GET /pet/{petId}",
          "inputSchema": {
            "additionalProperties": false,
            "properties": {
              "petId": {
                "description": "ID of pet to return",
                "format": "int64",
                "minimum": 1,
                "type": "integer",
                "x-parameter-location": "path",
                "x-parameter-required": true
              }
            },
            "required": [
              "petId"
            ],
            "type": "object"
          },
          "meta": null,
          "name": "getPetById",
          "outputSchema": {
            "additionalProperties": false,
            "description": "Unified response structure with success and error variants",
            "properties": {
              "body": {
                "description": "Response body - either success data or error information",
                "oneOf": [
                  {
                    "additionalProperties": true,
                    "properties": {
                      "id": {
                        "format": "int64",
                        "type": "integer"
                      },
                      "name": {
                        "example": "doggie",
                        "type": "string"
                      },
                      "photoUrls": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "status": {
                        "enum": [
                          "available",
                          "pending",
                          "sold"
                        ],
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "photoUrls"
                    ],
                    "type": "object"
                  },
                  {
                    "description": "Error response structure for tool execution failures",
                    "properties": {
                      "error": {
                        "description": "Execution errors that occur during tool execution\nThese return as Ok(CallToolResult { is_error: true })",
                        "oneOf": [
                          {
                            "description": "HTTP error response from the API",
                            "properties": {
                              "details": {
                                "description": "Optional structured error details from API"
                              },
                              "message": {
                                "description": "Error message or response body",
                                "type": "string"
                              },
                              "status": {
                                "description": "HTTP status code",
                                "format": "uint16",
                                "maximum": 65535,
                                "minimum": 0,
                                "type": "integer"
                              },
                              "type": {
                                "const": "http-error",
                                "type": "string"
                              }
                            },
                            "required": [
                              "type",
                              "status",
                              "message"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "Network/connection failures",
                            "properties": {
                              "category": {
                                "description": "Network error categories for better error handling",
                                "oneOf": [
                                  {
                                    "const": "timeout",
                                    "description": "Request timeout",
                                    "type": "string"
                                  },
                                  {
                                    "const": "connect",
                                    "description": "Connection error (DNS, refused, unreachable)",
                                    "type": "string"
                                  },
                                  {
                                    "const": "request",
                                    "description": "Request construction/sending error",
                                    "type": "string"
                                  },
                                  {
                                    "const": "body",
                                    "description": "Response body error",
                                    "type": "string"
                                  },
                                  {
                                    "const": "decode",
                                    "description": "Response decoding error",
                                    "type": "string"
                                  },
                                  {
                                    "const": "other",
                                    "description": "Other network errors",
                                    "type": "string"
                                  }
                                ]
                              },
                              "message": {
                                "description": "Description of the network failure",
                                "type": "string"
                              },
                              "type": {
                                "const": "network-error",
                                "type": "string"
                              }
                            },
                            "required": [
                              "type",
                              "message",
                              "category"
                            ],
                            "type": "object"
                          },
                          {
                            "description": "Response parsing failed",
                            "properties": {
                              "raw_response": {
                                "description": "Raw response body for debugging",
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "reason": {
                                "description": "Description of the parsing failure",
                                "type": "string"
                              },
                              "type": {
                                "const": "response-parsing-error",
                                "type": "string"
                              }
                            },
                            "required": [
                              "type",
                              "reason"
                            ],
                            "type": "object"
                          }
                        ]
                      }
                    },
                    "required": [
                      "error"
                    ],
                    "type": "object"
                  }
                ]
              },
              "status": {
                "description": "HTTP status code",
                "maximum": 599,
                "minimum": 100,
                "type": "integer"
              }
            },
            "required": [
              "status",
              "body"
            ],
            "type": "object"
          },
          "title": null
        }
      ]
    },
    "type": "tools_list"
  },
  {
    "data": {
      "meta": null,
      "nextCursor": null,
      "resources": []
    },
    "type": "resources_list"
  },
  {
    "data": {
      "meta": null,
      "nextCursor": null,
      "prompts": []
    },
    "type": "prompts_list"
  },
  {
    "arguments": {
      "petId": 123
    },
    "data": {
      "content": [
        {
          "annotations": null,
          "meta": null,
          "text": "{\"body\":{\"category\":{\"id\":1,\"name\":\"Dogs\"},\"id\":123,\"name\":\"doggie\",\"photoUrls\":[\"https://example.com/photo1.jpg\"],\"status\":\"available\",\"tags\":[{\"id\":1,\"name\":\"tag1\"}]},\"status\":200}",
          "type": "text"
        }
      ],
      "isError": false,
      "meta": null,
      "structuredContent": {
        "body": {
          "category": {
            "id": 1,
            "name": "Dogs"
          },
          "id": 123,
          "name": "doggie",
          "photoUrls": [
            "https://example.com/photo1.jpg"
          ],
          "status": "available",
          "tags": [
            {
              "id": 1,
              "name": "tag1"
            }
          ]
        },
        "status": 200
      }
    },
    "success": true,
    "tool": "getPetById",
    "type": "tool_call_result"
  },
  {
    "arguments": {
      "status": [
        "available",
        "pending"
      ]
    },
    "data": {
      "content": [
        {
          "annotations": null,
          "meta": null,
          "text": "{\"body\":[{\"category\":{\"id\":1,\"name\":\"Dogs\"},\"id\":1,\"name\":\"doggie\",\"photoUrls\":[\"https://example.com/photo1.jpg\"],\"status\":\"available\",\"tags\":[{\"id\":1,\"name\":\"tag1\"}]},{\"category\":{\"id\":2,\"name\":\"Cats\"},\"id\":2,\"name\":\"kitty\",\"photoUrls\":[\"https://example.com/photo2.jpg\"],\"status\":\"pending\",\"tags\":[{\"id\":2,\"name\":\"tag2\"}]}],\"status\":200}",
          "type": "text"
        }
      ],
      "isError": false,
      "meta": null,
      "structuredContent": {
        "body": [
          {
            "category": {
              "id": 1,
              "name": "Dogs"
            },
            "id": 1,
            "name": "doggie",
            "photoUrls": [
              "https://example.com/photo1.jpg"
            ],
            "status": "available",
            "tags": [
              {
                "id": 1,
                "name": "tag1"
              }
            ]
          },
          {
            "category": {
              "id": 2,
              "name": "Cats"
            },
            "id": 2,
            "name": "kitty",
            "photoUrls": [
              "https://example.com/photo2.jpg"
            ],
            "status": "pending",
            "tags": [
              {
                "id": 2,
                "name": "tag2"
              }
            ]
          }
        ],
        "status": 200
      }
    },
    "success": true,
    "tool": "findPetsByStatus",
    "type": "tool_call_result"
  },
  {
    "arguments": {
      "request_body": {
        "name": "MCP Test Dog",
        "status": "available"
      }
    },
    "data": {
      "content": [
        {
          "annotations": null,
          "meta": null,
          "text": "{\"body\":{\"category\":{\"id\":1,\"name\":\"Dogs\"},\"id\":123,\"name\":\"new doggie\",\"photoUrls\":[\"https://example.com/photo1.jpg\"],\"status\":\"available\",\"tags\":[{\"id\":1,\"name\":\"tag1\"}]},\"status\":201}",
          "type": "text"
        }
      ],
      "isError": false,
      "meta": null,
      "structuredContent": {
        "body": {
          "category": {
            "id": 1,
            "name": "Dogs"
          },
          "id": 123,
          "name": "new doggie",
          "photoUrls": [
            "https://example.com/photo1.jpg"
          ],
          "status": "available",
          "tags": [
            {
              "id": 1,
              "name": "tag1"
            }
          ]
        },
        "status": 201
      }
    },
    "success": true,
    "tool": "addPet",
    "type": "tool_call_result"
  },
  {
    "arguments": {
      "petId": 999999
    },
    "data": {
      "content": [
        {
          "annotations": null,
          "meta": null,
          "text": "{\"body\":{\"message\":\"Pet not found\"},\"status\":404}",
          "type": "text"
        }
      ],
      "isError": true,
      "meta": null,
      "structuredContent": {
        "body": {
          "message": "Pet not found"
        },
        "status": 404
      }
    },
    "success": true,
    "tool": "getPetById",
    "type": "tool_call_result"
  },
  {
    "arguments": {
      "request_body": {
        "status": "invalid_status_value"
      }
    },
    "error": {
      "code": "unknown",
      "message": "Validation failed - parameter 'request_body': \"invalid_status_value\" is not one of [\"available\",\"pending\",\"sold\"]"
    },
    "success": false,
    "tool": "addPet",
    "type": "tool_call_result"
  },
  {
    "arguments": {
      "pet_id": 123
    },
    "error": {
      "code": "unknown",
      "message": "Validation failed - invalid parameters: 'pet_id' (suggestions: petId); missing parameters: 'petId' is required (expected: integer)"
    },
    "success": false,
    "tool": "getPetById",
    "type": "tool_call_result"
  },
  {
    "arguments": {
      "limit": 10,
      "statuses": [
        "available"
      ]
    },
    "error": {
      "code": "unknown",
      "message": "Validation failed - invalid parameters: 'limit', 'statuses' (suggestions: status); missing parameters: 'status' is required (expected: array)"
    },
    "success": false,
    "tool": "findPetsByStatus",
    "type": "tool_call_result"
  },
  {
    "arguments": {
      "petId": "not-a-number"
    },
    "error": {
      "code": "unknown",
      "message": "Validation failed - parameter 'petId': \"not-a-number\" is not of type \"integer\""
    },
    "success": false,
    "tool": "getPetById",
    "type": "tool_call_result"
  },
  {
    "arguments": {
      "status": "available"
    },
    "error": {
      "code": "unknown",
      "message": "Validation failed - parameter 'status': \"available\" is not of type \"array\""
    },
    "success": false,
    "tool": "findPetsByStatus",
    "type": "tool_call_result"
  },
  {
    "arguments": {
      "status": [
        "invalid_status"
      ]
    },
    "error": {
      "code": "unknown",
      "message": "Validation failed - parameter 'status': \"invalid_status\" is not one of [\"available\",\"pending\",\"sold\"]"
    },
    "success": false,
    "tool": "findPetsByStatus",
    "type": "tool_call_result"
  },
  {
    "arguments": {
      "request_body": {
        "category": {
          "id": "not-a-number"
        },
        "name": "Test Pet",
        "status": "available"
      }
    },
    "data": {
      "content": [
        {
          "annotations": null,
          "meta": null,
          "text": "{\"body\":{\"details\":\"Name is required\",\"message\":\"Invalid input\"},\"status\":400}",
          "type": "text"
        }
      ],
      "isError": true,
      "meta": null,
      "structuredContent": {
        "body": {
          "details": "Name is required",
          "message": "Invalid input"
        },
        "status": 400
      }
    },
    "success": true,
    "tool": "addPet",
    "type": "tool_call_result"
  },
  {
    "arguments": {
      "petId": 123
    },
    "error": {
      "code": -32601,
      "data": {
        "suggestions": [
          "getPetById"
        ]
      },
      "message": "Tool 'getPetByID' not found"
    },
    "success": false,
    "tool": "getPetByID",
    "type": "tool_call_result"
  }
]
