image: rust:1.88.0@sha256:5771a3cc2081935c59ac52b92d49c9e164d4fed92c9f6420aa8cc50364aead6e

# Global variables for package versions
variables:
  COMMITLINT_CLI_VERSION: "17.6.1"
  COMMITLINT_CONFIG_VERSION: "17.6.1"
  SEMANTIC_RELEASE_VERSION: "21.0.7"
  SEMANTIC_RELEASE_CHANGELOG_VERSION: "6.0.3"
  SEMANTIC_RELEASE_GIT_VERSION: "10.0.1"
  SEMANTIC_RELEASE_GITLAB_VERSION: "12.1.1"
  SEMANTIC_RELEASE_EXEC_VERSION: "6.0.3"
  SEMANTIC_RELEASE_CARGO_VERSION: "2.4.44"
  CONVENTIONAL_CHANGELOG_CONVENTIONALCOMMITS_VERSION: "7.0.2"

# Workflow rules for automatic pipeline cancellation
workflow:
  auto_cancel:
    on_new_commit: interruptible
    on_job_failure: none
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG

# Common file patterns for Rust jobs
.rust-changes: &rust-changes
  - "Cargo.toml"
  - "Cargo.lock"
  - "src/**/*"
  - "tests/**/*"
  - "examples/**/*"
  - ".cargo/**/*"

# Cache configuration patterns for optimal build performance
.cargo-registry-cache: &cargo-registry-cache
  key: $CI_COMMIT_REF_SLUG
  paths:
    # https://doc.rust-lang.org/cargo/guide/cargo-home.html?highlight=CI%20cache#caching-the-cargo-home-in-ci
    - ".cargo/.crates.toml"
    - ".cargo/.crates2.json"
    - ".cargo/bin/"
    - ".cargo/registry/index/"
    - ".cargo/registry/cache/"
    - ".cargo/registry/src/"
    - ".cargo/git/db/"
  policy: pull

.cargo-build-cache: &cargo-build-cache
  key: $CI_COMMIT_REF_SLUG-$CI_JOB_NAME_SLUG
  paths:
    # https://doc.rust-lang.org/cargo/guide/build-cache.html
    - "target"
  policy: pull-push

# Unified Rust job template - consolidated configuration for all Rust jobs
.rust-template:
  variables:
    # Assume the PWD is CI_PROJECT_DIR, this way we don't have to deal with
    # Windows (`\`) vs Linux (`/`) path separators.
    CARGO_HOME: ".cargo"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes: *rust-changes
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
      changes: *rust-changes
  before_script:
    - rustc --version
    - cargo --version
  interruptible: true

# Semantic release job template - common setup for semantic-release jobs
.semantic-release-template: &semantic-release-template
  image: rust:1.88.0@sha256:5771a3cc2081935c59ac52b92d49c9e164d4fed92c9f6420aa8cc50364aead6e
  before_script:
    # Install Node.js in Rust image
    - apt-get update -qq && apt-get install -y -qq curl
    - curl -fsSL https://nodejs.org/dist/v20.11.1/node-v20.11.1-linux-x64.tar.xz | tar -xJ -C /usr/local --strip-components=1
    - node --version
    - npm --version
    # Install semantic-release and plugins
    - npm install -g semantic-release@${SEMANTIC_RELEASE_VERSION} @semantic-release/changelog@${SEMANTIC_RELEASE_CHANGELOG_VERSION} @semantic-release/git@${SEMANTIC_RELEASE_GIT_VERSION} @semantic-release/gitlab@${SEMANTIC_RELEASE_GITLAB_VERSION} @semantic-release/exec@${SEMANTIC_RELEASE_EXEC_VERSION} conventional-changelog-conventionalcommits@${CONVENTIONAL_CHANGELOG_CONVENTIONALCOMMITS_VERSION}
    # Install semantic-release-cargo static binary
    - curl -L https://github.com/semantic-release-cargo/semantic-release-cargo/releases/download/v${SEMANTIC_RELEASE_CARGO_VERSION}/semantic-release-cargo-x86_64-unknown-linux-musl -o /usr/local/bin/semantic-release-cargo
    - chmod +x /usr/local/bin/semantic-release-cargo
    - semantic-release-cargo --version
  interruptible: true

# Pipeline stages
stages:
  - build
  - test
  - lint
  - docs
  - examples
  - integration
  - release

# Build job - compile the project
build:
  extends: .rust-template
  stage: build
  script:
    - cargo build --verbose
  cache:
    - <<: *cargo-registry-cache
    - <<: *cargo-build-cache

# Test job - run unit tests only (excluding integration tests)
test:
  extends: .rust-template
  stage: test
  script:
    - cargo test --verbose --lib --bins
  cache:
    - <<: *cargo-registry-cache
    - <<: *cargo-build-cache
      policy: pull
  dependencies:
    - build

# Clippy job - run linting
clippy:
  extends: .rust-template
  stage: lint
  before_script:
    - !reference [.rust-template, before_script]
    - rustup component add clippy
    - cargo clippy --version
  script:
    - cargo clippy --all-targets --all-features -- -D warnings
  cache:
    - <<: *cargo-registry-cache
    - <<: *cargo-build-cache
      policy: pull
  dependencies:
    - build

# Format job - check code formatting
fmt:
  extends: .rust-template
  stage: lint
  before_script:
    - !reference [.rust-template, before_script]
    - rustup component add rustfmt
    - cargo fmt --version
  script:
    - cargo fmt --all -- --check
  cache:
    - <<: *cargo-registry-cache

# Semantic release config lint job - validate semantic-release configuration
semantic-release-lint:
  <<: *semantic-release-template
  stage: lint
  script:
    - semantic-release --dry-run --no-ci

# Documentation job - build and check rustdoc
rustdoc:
  extends: .rust-template
  stage: docs
  script:
    # Build documentation with all features and check for warnings
    - cargo doc --all-features --no-deps 2>&1 | tee doc-output.txt
    - '! grep -E "warning.*missing documentation" doc-output.txt || (echo "Missing documentation found!" && exit 1)'
    # Also build with private items to ensure internal documentation is complete
    - cargo rustdoc --lib -- --document-private-items
  cache:
    - <<: *cargo-registry-cache
    - <<: *cargo-build-cache
      policy: pull
  dependencies:
    - build
  artifacts:
    paths:
      - target/doc
      - doc-output.txt
    expire_in: 1 week
    when: always

# Documentation examples job - ensure all documentation examples compile
doc-test:
  extends: .rust-template
  stage: docs
  script:
    # Run documentation tests to ensure examples compile
    - cargo test --doc --all-features
  cache:
    - <<: *cargo-registry-cache
    - <<: *cargo-build-cache
      policy: pull
  dependencies:
    - build

# Commit lint job - check commit message format
commitlint:
  image: node:22.17.1@sha256:9e6918e8e32a47a58ed5fb9bd235bbc1d18a8c272e37f15d502b9db9e36821ee
  stage: lint
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: "$CI_COMMIT_TAG"
      when: never
  variables:
    GIT_FETCH_EXTRA_FLAGS: "+refs/heads/main:refs/remotes/origin/main"
  before_script:
    - npm install -g @commitlint/cli@${COMMITLINT_CLI_VERSION} @commitlint/config-conventional@${COMMITLINT_CONFIG_VERSION}
  script:
    - |
      echo "module.exports = {
        extends: ['@commitlint/config-conventional'],
        rules: {
          'header-max-length': [2, 'always', 150],
        },
      }" > ./commitlint.config.js
      commitlint --from=$(git merge-base origin/main HEAD) --to=$CI_COMMIT_SHA
  interruptible: true

# Examples job - build all examples
examples:
  extends: .rust-template
  stage: examples
  script:
    - cargo build --examples --verbose
  cache:
    - <<: *cargo-registry-cache
    - <<: *cargo-build-cache
      policy: pull
  dependencies:
    - build

# Integration test with JavaScript/Node.js
integration-js:
  extends: .rust-template
  image: rust:1.88.0@sha256:5771a3cc2081935c59ac52b92d49c9e164d4fed92c9f6420aa8cc50364aead6e
  stage: integration
  before_script:
    - !reference [.rust-template, before_script]
    - apt-get update -qq && apt-get install -y -qq curl
    - curl -fsSL https://nodejs.org/dist/v20.11.1/node-v20.11.1-linux-x64.tar.xz | tar -xJ -C /usr/local --strip-components=1
    - node --version
    - npm --version
  script:
    - cargo test --test test_with_js --verbose
  cache:
    - <<: *cargo-registry-cache
    - <<: *cargo-build-cache
      policy: pull
  dependencies:
    - build
  interruptible: true

# Integration test with Python
integration-python:
  extends: .rust-template
  image: rust:1.88.0@sha256:5771a3cc2081935c59ac52b92d49c9e164d4fed92c9f6420aa8cc50364aead6e
  stage: integration
  before_script:
    - !reference [.rust-template, before_script]
    - apt-get update -qq && apt-get install -y -qq python3 python3-pip python3-venv curl
    - curl -LsSf https://astral.sh/uv/install.sh | sh
    - export PATH="$HOME/.local/bin:$PATH"
    - python3 --version
    - uv --version
  script:
    - cargo test --test test_with_python --verbose
  cache:
    - <<: *cargo-registry-cache
    - <<: *cargo-build-cache
      policy: pull
  dependencies:
    - build
  interruptible: true

# Semantic release job - automated versioning and releases
semantic-release:
  <<: *semantic-release-template
  stage: release
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $RELEASE_ENABLED == "true"'
    - if: '$CI_PIPELINE_SOURCE == "web" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $RELEASE_ENABLED == "true"'
  variables:
    GIT_FETCH_EXTRA_FLAGS: "+refs/heads/main:refs/remotes/origin/main"
  before_script:
    - !reference [.semantic-release-template, before_script]
    # Configure git
    - git config user.name "${GITLAB_USER_NAME}"
    - git config user.email "${GITLAB_USER_EMAIL}"
  script:
    - semantic-release
  interruptible: false
