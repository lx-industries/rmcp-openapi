---
source: src/tool_generator.rs
expression: error_schema
---
{
  "description": "Error response structure for tool execution failures",
  "properties": {
    "error": {
      "description": "Error that can occur during tool execution",
      "oneOf": [
        {
          "description": "Invalid parameter error with suggestions",
          "properties": {
            "parameter": {
              "description": "The parameter name that was invalid",
              "type": "string"
            },
            "suggestions": {
              "description": "Suggested correct parameter names",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "type": {
              "const": "invalid-parameter",
              "type": "string"
            },
            "valid_parameters": {
              "description": "All valid parameter names for this tool",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [
            "type",
            "parameter",
            "suggestions",
            "valid_parameters"
          ],
          "type": "object"
        },
        {
          "description": "Tool not found error",
          "properties": {
            "tool_name": {
              "description": "Name of the tool that was not found",
              "type": "string"
            },
            "type": {
              "const": "tool-not-found",
              "type": "string"
            }
          },
          "required": [
            "type",
            "tool_name"
          ],
          "type": "object"
        },
        {
          "description": "Validation error (e.g., type mismatches, constraint violations)",
          "properties": {
            "actual_value": {
              "description": "The actual value that failed validation"
            },
            "constraints": {
              "anyOf": [
                {
                  "description": "Validation constraints that were violated",
                  "properties": {
                    "const_value": {
                      "description": "Exact value that must match"
                    },
                    "enum_values": {
                      "description": "Allowed enum values",
                      "items": true,
                      "type": [
                        "array",
                        "null"
                      ]
                    },
                    "exclusive_maximum": {
                      "description": "Whether maximum is exclusive",
                      "type": [
                        "boolean",
                        "null"
                      ]
                    },
                    "exclusive_minimum": {
                      "description": "Whether minimum is exclusive",
                      "type": [
                        "boolean",
                        "null"
                      ]
                    },
                    "format": {
                      "description": "Expected format (e.g., \"date-time\", \"email\", \"uri\")",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "max_items": {
                      "description": "Maximum number of items (for arrays)",
                      "format": "uint",
                      "minimum": 0,
                      "type": [
                        "integer",
                        "null"
                      ]
                    },
                    "max_length": {
                      "description": "Maximum length (for strings/arrays)",
                      "format": "uint",
                      "minimum": 0,
                      "type": [
                        "integer",
                        "null"
                      ]
                    },
                    "max_properties": {
                      "description": "Maximum number of properties (for objects)",
                      "format": "uint",
                      "minimum": 0,
                      "type": [
                        "integer",
                        "null"
                      ]
                    },
                    "maximum": {
                      "description": "Maximum value (for numbers)",
                      "format": "double",
                      "type": [
                        "number",
                        "null"
                      ]
                    },
                    "min_items": {
                      "description": "Minimum number of items (for arrays)",
                      "format": "uint",
                      "minimum": 0,
                      "type": [
                        "integer",
                        "null"
                      ]
                    },
                    "min_length": {
                      "description": "Minimum length (for strings/arrays)",
                      "format": "uint",
                      "minimum": 0,
                      "type": [
                        "integer",
                        "null"
                      ]
                    },
                    "min_properties": {
                      "description": "Minimum number of properties (for objects)",
                      "format": "uint",
                      "minimum": 0,
                      "type": [
                        "integer",
                        "null"
                      ]
                    },
                    "minimum": {
                      "description": "Minimum value (for numbers)",
                      "format": "double",
                      "type": [
                        "number",
                        "null"
                      ]
                    },
                    "multiple_of": {
                      "description": "Number must be a multiple of this value",
                      "format": "double",
                      "type": [
                        "number",
                        "null"
                      ]
                    },
                    "pattern": {
                      "description": "Pattern the string must match",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "required": {
                      "description": "Required properties (for objects)",
                      "items": {
                        "type": "string"
                      },
                      "type": [
                        "array",
                        "null"
                      ]
                    },
                    "unique_items": {
                      "description": "Whether array items must be unique",
                      "type": [
                        "boolean",
                        "null"
                      ]
                    }
                  },
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Constraint details that were violated"
            },
            "expected_type": {
              "description": "Expected type or format",
              "type": [
                "string",
                "null"
              ]
            },
            "field_path": {
              "description": "Path to the field that failed validation (e.g., \"address.street\")",
              "type": [
                "string",
                "null"
              ]
            },
            "message": {
              "description": "Description of what validation failed",
              "type": "string"
            },
            "type": {
              "const": "validation-error",
              "type": "string"
            }
          },
          "required": [
            "type",
            "message"
          ],
          "type": "object"
        },
        {
          "description": "Missing required parameter",
          "properties": {
            "description": {
              "description": "Description of the parameter from OpenAPI",
              "type": [
                "string",
                "null"
              ]
            },
            "expected_type": {
              "description": "Expected type of the parameter",
              "type": "string"
            },
            "parameter": {
              "description": "Name of the missing parameter",
              "type": "string"
            },
            "type": {
              "const": "missing-required-parameter",
              "type": "string"
            }
          },
          "required": [
            "type",
            "parameter",
            "expected_type"
          ],
          "type": "object"
        },
        {
          "description": "HTTP error response from the API",
          "properties": {
            "message": {
              "description": "Error message or response body",
              "type": "string"
            },
            "status": {
              "description": "HTTP status code",
              "format": "uint16",
              "maximum": 65535,
              "minimum": 0,
              "type": "integer"
            },
            "type": {
              "const": "http-error",
              "type": "string"
            }
          },
          "required": [
            "type",
            "status",
            "message"
          ],
          "type": "object"
        },
        {
          "description": "HTTP request failed (network, connection, timeout)",
          "properties": {
            "message": {
              "description": "Description of the request failure",
              "type": "string"
            },
            "type": {
              "const": "http-request-error",
              "type": "string"
            }
          },
          "required": [
            "type",
            "message"
          ],
          "type": "object"
        },
        {
          "description": "JSON parsing/serialization error",
          "properties": {
            "message": {
              "description": "Description of the JSON error",
              "type": "string"
            },
            "type": {
              "const": "json-error",
              "type": "string"
            }
          },
          "required": [
            "type",
            "message"
          ],
          "type": "object"
        }
      ]
    }
  },
  "required": [
    "error"
  ],
  "type": "object"
}
